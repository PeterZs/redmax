from load ***********************************************************************************************************************************************************

	/////////////////////////////////////////////////////////////
	//            P A R T I C L E  S H O W C A S E             //
	/////////////////////////////////////////////////////////////
	//randomBasis = Matrix3d::Identity();
	//addBlock(RESOURCE_DIR, "grounded_bar", 12, 12, 1, Vector3d(0.0, 12, 0.0), randomBasis, true);
	//randomBasis = AngleAxisd((0.2 * M_PI) / 2, Vector3d::UnitZ());
	//addBlock(RESOURCE_DIR, "top", 6, 6, 1, Vector3d(-6.5, 11.11, 0.0), randomBasis);
	//randomBasis = AngleAxisd((1.2 * M_PI) / 2, Vector3d::UnitZ());
	//addBlock(RESOURCE_DIR, "bottom", 6, 6, 1, Vector3d(-8.1, 7.9, 0.0), randomBasis);

	//joints.push_back(make_joint("grounded_bar", "top", Vector3d(-4.0, 0.0, 0.0), Vector3d(2.5, 0.0, 0.0), JType::Ball));
	//joints.push_back(make_joint("top", "bottom", Vector3d(-2.5, 0.0, 0.0), Vector3d(2.5, 0.0, 0.0), JType::Ball));

	//// The set on the right has the springy joint
	//randomBasis = AngleAxisd((0.2 * M_PI) / 2, Vector3d::UnitZ());
	//addBlock(RESOURCE_DIR, "top2", 6, 6, 1, Vector3d(2.5, 11.11, 0.0), randomBasis);
	//randomBasis = AngleAxisd((1.2 * M_PI) / 2, Vector3d::UnitZ());
	//addBlock(RESOURCE_DIR, "bottom2", 6, 6, 1, Vector3d(0.1, 7.9, 0.0), randomBasis);

	//joints.push_back(make_joint("grounded_bar", "top2", Vector3d(4.0, 0.0, 0.0), Vector3d(2.5, 0.0, 0.0), JType::Ball));
	//joints.push_back(make_joint("top2", "bottom2", Vector3d(-2.5, 0.0, 0.0), Vector3d(2.5, 0.0, 0.0), JType::Ball));

	//p = Particle{ "bottom", Eigen::Vector3d(-2.5f,0.0,0.0), 0 };
	//particles.push_back(p);
	//p = Particle{ "top", Eigen::Vector3d(0.5f,0.25f,0.0), 0 };
	//particles.push_back(p);

	//p = Particle{ "bottom2", Eigen::Vector3d(-2.5f,0.0,0.0), 0 };
	//particles.push_back(p);
	//p = Particle{ "top2", Eigen::Vector3d(0.5f,0.25f,0.0), 0 };
	//particles.push_back(p);

	/////////////////////////////////////////////////////////////
	//     P H Y S I C A L L Y  B A S E D  M O D E L I N G     //
	/////////////////////////////////////////////////////////////
	//randomBasis = Eigen::Matrix3d::Identity();
	//addInertialBlock(RESOURCE_DIR, "root", 1, 8, 8, "", Vector3d(0.0, 6.4, 0.0), randomBasis);
	//blocks.find("root")->second->setInvisible(true);

	// Control system
	/*randomBasis = AngleAxisd(M_PI / 2 + 1.0239, Vector3d::UnitZ());
	addInertialBlock(RESOURCE_DIR, "m", 0.5, 1.50, 0.4, "root", Vector3d(0.75, 0.0, 0.0), randomBasis, Vector3d(3.8, 0.78, 0.0), JType::Powered, 20);
	randomBasis = AngleAxisd(M_PI + 1.12875, Vector3d::UnitZ());
	addInertialBlock(RESOURCE_DIR, "b", 1 , 4.15, 0.4, "root", Vector3d(2.075, 0.0, 0.0), randomBasis, Vector3d(0.0, 0.0, 0.0));
	randomBasis = AngleAxisd(-1.12875 - 1.49692, Vector3d::UnitZ());
	addInertialBlock(RESOURCE_DIR, "c", 2, 3.93, 0.4, "b", Vector3d(1.965, 0.0, 0.0), randomBasis, Vector3d(2.075, 0.0, 0.0));
	randomBasis = AngleAxisd(1.505666, Vector3d::UnitZ());
	addInertialBlock(RESOURCE_DIR, "d", 2, 4.01, 0.4, "b", Vector3d(2.005, 0.0, 0.0), randomBasis, Vector3d(2.075, 0.0, 0.0));
	randomBasis = AngleAxisd(M_PI - 0.79965, Vector3d::UnitZ());
	addInertialBlock(RESOURCE_DIR, "e", 2.4, 5.58, 0.4, "b", Vector3d(2.79, 0.0, 0.0), randomBasis, Vector3d(-2.075, 0.0, 0.0));
	addJoint("d", "e", JType::Ball, Vector3d(-2.005, 0.0, 0.0), Vector3d(-2.79, 0.0, 0.0));
	randomBasis = AngleAxisd(M_PI + 1.16444, Vector3d::UnitZ());
	addInertialBlock(RESOURCE_DIR, "j", 2.4, 5.00, 0.4, "b", Vector3d(2.50, 0.0, 0.0), randomBasis, Vector3d(-2.075, 0.0, 0.0));
	addJoint("m", "j", JType::Ball, Vector3d(-0.75, 0.0, 0.0), Vector3d(-2.50, 0.0, 0.0));
	randomBasis = AngleAxisd(M_PI + 0.54685 + 0.685633, Vector3d::UnitZ());
	addInertialBlock(RESOURCE_DIR, "k", 2.4, 6.19, 0.4, "m", Vector3d(3.095, 0.0, 0.0), randomBasis, Vector3d(-0.75, 0.0, 0.0));
	addJoint("k", "c", JType::Ball, Vector3d(-3.095, 0.0, 0.0), Vector3d(-1.965, 0.0, 0.0));
	randomBasis = AngleAxisd(M_PI - 0.88165, Vector3d::UnitZ());
	addInertialBlock(RESOURCE_DIR, "f", 2, 3.94, 0.4, "d", Vector3d(1.97, 0.0, 0.0), randomBasis, Vector3d(-2.005, 0.0, 0.0));
	randomBasis = AngleAxisd(M_PI + 0.92316, Vector3d::UnitZ());
	addInertialBlock(RESOURCE_DIR, "g", 2, 3.67, 0.4, "c", Vector3d(1.835, 0.0, 0.0), randomBasis, Vector3d(-1.965, 0.0, 0.0));
	addJoint("f", "g", JType::Ball, Vector3d(-1.97, 0.0, 0.0), Vector3d(-1.835, 0.0, 0.0));
	randomBasis = AngleAxisd(M_PI - 0.82778, Vector3d::UnitZ());
	addInertialBlock(RESOURCE_DIR, "h", 2.4, 6.57, 0.4, "g", Vector3d(3.285, 0.0, 0.0), randomBasis, Vector3d(-1.835, 0.0, 0.0));
	randomBasis = AngleAxisd(1.72955, Vector3d::UnitZ());
	addInertialBlock(RESOURCE_DIR, "i", 2.4, 4.90, 0.4, "g", Vector3d(2.45, 0.0, 0.0), randomBasis, Vector3d(1.835, 0.0, 0.0));
	addJoint("i", "h", JType::Ball, Vector3d(-2.45, 0.0, 0.0), Vector3d(-3.285, 0.0, 0.0));*/


	// DOUBLE PENDULUM
	//randomBasis = AngleAxisd((1.6 * M_PI) / 2, Vector3d::UnitZ());
	//addInertialBlock(RESOURCE_DIR, "top", 3, 6, 0.8, "root", Vector3d(2.8, 0.0, 0.0), randomBasis, Vector3d(0.0, 0.0, 0.0));

	//randomBasis = AngleAxisd((0.2 * M_PI) / 2, Vector3d::UnitZ());
	//addInertialBlock(RESOURCE_DIR, "bottom", 3, 6, 0.8, "top", Vector3d(2.8, 0.0, 0.0), randomBasis, Vector3d(-2.8, 0.0, 0.0), JType::Ball);

	// WITH MOTOR
	//double power = -10;
	//randomBasis = AngleAxisd((1.0 * M_PI), Vector3d::UnitZ());
	//addInertialBlock(RESOURCE_DIR, "motor", 0.25, 1.0, 0.5, "root", Vector3d(-0.25, 0.0, 0.0), randomBasis, Vector3d(1.0, 5.0, 0.0), JType::Powered, power);
	//rev = 2 * M_PI / abs(power);

	//randomBasis = AngleAxisd((-0.5 * M_PI), Vector3d::UnitZ());
	//addInertialBlock(RESOURCE_DIR, "top", 3, 6, 0.8, "motor", Vector3d(2.8, 0.0, 0.0), randomBasis, Vector3d(0.75, 0.0, 0.0));

	//randomBasis = Eigen::Matrix3d::Identity();
	//addInertialBlock(RESOURCE_DIR, "bottom", 3, 6, 0.8, "top", Vector3d(2.8, 0.0, 0.0), randomBasis, Vector3d(-2.8, 0.0, 0.0), JType::Ball);

	//p = { "bottom", Eigen::Vector3d(-3.0,0.0,0.0) };
	//p.cp.push_back(Eigen::Vector3d(0.0, 0.0, 0.0));
	//p.cp.push_back(Eigen::Vector3d(-1.0, 0.0, 0.0));
	//p.cp.push_back(Eigen::Vector3d(-2.0, 0.25, 0.0));
	//p.cp.push_back(Eigen::Vector3d(-1.0, 0.875, 0.0));
	//p.cp.push_back(Eigen::Vector3d(0.0, 1.5, 0.0));
	//p.cp.push_back(Eigen::Vector3d(1.5, 0.85, 0.0));
	//p.cp.push_back(Eigen::Vector3d(3.0, 0.25, 0.0));
	//p.cp.push_back(Eigen::Vector3d(2.0, 0.0, 0.0));
	//p.cp.push_back(Eigen::Vector3d(1.0, 0.0, 0.0));
	//p.replacei = 0;
	//particles.push_back(p);

	//randomBasis = AngleAxisd((-0.35 * M_PI), Vector3d::UnitZ());
	//disconnectInertial("top", Vector3d(1.0, 1.0, 0.0), randomBasis);

	//randomBasis = AngleAxisd((0.65 * M_PI), Vector3d::UnitZ());
	//disconnectInertial("bottom", Vector3d(1.0, -1.0, 0.0), randomBasis);



from reLoad  ************************************************************************************************************************************************************

	int numScenes = 3;
	Matrix3d randomBasis = Matrix3d::Identity();
	particles.clear();
	if (sceneNum%numScenes == 1)	// Base Case
	{
		/////////////////////////////////////////////////////////////
		//           J O I N T  T Y P E  S H O W C A S E           //
		/////////////////////////////////////////////////////////////
		randomBasis = Eigen::Matrix3d::Identity();
		addInertialBlock(RESOURCE_DIR, "root", 1, 8, 8, "", Vector3d(0.0, 6.0, 0.0), randomBasis);
		blocks.find("root")->second->setInvisible(true);

		randomBasis = AngleAxisd((1.6 * M_PI) / 2, Vector3d::UnitZ());
		addInertialBlock(RESOURCE_DIR, "top", 3, 3, 1, "root", Vector3d(1.0, 0.0, 0.0), randomBasis, Vector3d(0.0, 0.0, 0.0));
		addInertialBlock(RESOURCE_DIR, "top2", 3, 3, 1, "root", Vector3d(1.0, 0.0, 0.0), randomBasis, Vector3d(7.0, 0.0, 0.0));
		addInertialBlock(RESOURCE_DIR, "top3", 3, 3, 1, "root", Vector3d(1.0, 0.0, 0.0), randomBasis, Vector3d(-7.0, 0.0, 0.0));
		randomBasis = AngleAxisd((0.5 * M_PI), Vector3d::UnitZ());
		disconnectInertial("top2", Vector3d(4.0, 0.0, 0.0), randomBasis);
		randomBasis = AngleAxisd((0.25 * M_PI), Vector3d::UnitZ());
		disconnectInertial("top3", Vector3d(2.0, 0.0, 0.0), randomBasis);

		randomBasis = AngleAxisd((0.2 * M_PI) / 2, Vector3d::UnitZ());
		addInertialBlock(RESOURCE_DIR, "bottom", 3, 3, 1, "top", Vector3d(1.0, 0.0, 0.0), randomBasis, Vector3d(-1.0, 0.0, 0.0), JType::Ball);
		addInertialBlock(RESOURCE_DIR, "bottom2", 3, 3, 1, "top2", Vector3d(1.0, 0.0, 0.0), randomBasis, Vector3d(-1.0, 0.0, 0.0), JType::Ball);
		addInertialBlock(RESOURCE_DIR, "bottom3", 3, 3, 1, "top3", Vector3d(1.0, 0.0, 0.0), randomBasis, Vector3d(-1.0, 0.0, 0.0), JType::Ball);
		randomBasis = AngleAxisd((0.25 * M_PI), Vector3d::UnitZ());
		disconnectInertial("bottom2", Vector3d(0.0, 1.0, 0.0), randomBasis);
		randomBasis = AngleAxisd((0.25 * M_PI), Vector3d::UnitZ());
		disconnectInertial("bottom3", Vector3d(0.0, 1.0, 0.0), randomBasis);

		//randomBasis = Eigen::Matrix3d::Identity();
		//addInertialBlock(RESOURCE_DIR, "motor", 0.5, 1.0, 0.5, "root", Vector3d(-0.5, 0.0, 0.0), randomBasis, Vector3d(-5.0, 5.0, 0.0), JType::Powered, 20);
		//addInertialBlock(RESOURCE_DIR, "sliding_body", 8, 8, 1, "motor", Vector3d(-4.0, 0.0, 0.0), randomBasis, Vector3d(0.5, 0.0, 0.0));
		//addJoint("sliding_body", "root", JType::Slider, Vector3d(-2.0, 0.0, 0.0), Vector3d(-2.0, 5.0, 0.0));
	}
	else if (sceneNum%numScenes == 2)
	{
		randomBasis = Eigen::Matrix3d::Identity();
		addInertialBlock(RESOURCE_DIR, "root", 1, 8, 8, "", Vector3d(0.0, 6.0, 0.0), randomBasis);
		blocks.find("root")->second->setInvisible(true);

		double power = -10;
		randomBasis = AngleAxisd((1.0 * M_PI), Vector3d::UnitZ());
		addInertialBlock(RESOURCE_DIR, "motor", 0.25, 1.0, 0.5, "root", Vector3d(-0.25, 0.0, 0.0), randomBasis, Vector3d(1.0, 5.0, 0.0), JType::Powered, power);
		rev = 2 * M_PI / abs(power);

		randomBasis = AngleAxisd((-0.5 * M_PI), Vector3d::UnitZ());
		//randomBasis = AngleAxisd((1.6 * M_PI) / 2, Vector3d::UnitZ());
		addInertialBlock(RESOURCE_DIR, "top", 3, 6, 0.8, "motor", Vector3d(2.8, 0.0, 0.0), randomBasis, Vector3d(0.75, 0.0, 0.0));

		randomBasis = Eigen::Matrix3d::Identity();
		//randomBasis = AngleAxisd((0.2 * M_PI) / 2, Vector3d::UnitZ());
		addInertialBlock(RESOURCE_DIR, "bottom", 3, 6, 0.8, "top", Vector3d(2.8, 0.0, 0.0), randomBasis, Vector3d(-2.8, 0.0, 0.0), JType::Ball);

		Particle p = { "bottom", Eigen::Vector3d(-3.0,0.0,0.0) };
		p.cp.push_back(Eigen::Vector3d(0.0, 0.0, 0.0));
		p.cp.push_back(Eigen::Vector3d(-1.0, 0.0, 0.0));
		p.cp.push_back(Eigen::Vector3d(-2.0, 0.25, 0.0));
		p.cp.push_back(Eigen::Vector3d(-1.0, 0.875, 0.0));
		p.cp.push_back(Eigen::Vector3d(0.0, 1.5, 0.0));
		p.cp.push_back(Eigen::Vector3d(1.5, 0.85, 0.0));
		p.cp.push_back(Eigen::Vector3d(3.0, 0.25, 0.0));
		p.cp.push_back(Eigen::Vector3d(2.0, 0.0, 0.0));
		p.cp.push_back(Eigen::Vector3d(1.0, 0.0, 0.0));
		particles.push_back(p);

		randomBasis = AngleAxisd((-0.35 * M_PI), Vector3d::UnitZ());
		disconnectInertial("top", Vector3d(1.0, 1.0, 0.0), randomBasis);

		randomBasis = AngleAxisd((0.65 * M_PI), Vector3d::UnitZ());
		disconnectInertial("bottom", Vector3d(1.0, -1.0, 0.0), randomBasis);
	}
	else if (sceneNum%numScenes == 0)
	{
		randomBasis = Eigen::Matrix3d::Identity();
		addInertialBlock(RESOURCE_DIR, "root", 1, 8, 8, "", Vector3d(0.0, 6.4, 0.0), randomBasis);
		blocks.find("root")->second->setInvisible(true);

		double power = -10;
		randomBasis = AngleAxisd((1.0 * M_PI), Vector3d::UnitZ());
		addInertialBlock(RESOURCE_DIR, "motor", 0.25, 1.0, 0.5, "root", Vector3d(-0.25, 0.0, 0.0), randomBasis, Vector3d(1.0, 5.0, 0.0), JType::Powered, power);
		rev = 2 * M_PI / abs(power);

		randomBasis = AngleAxisd((-0.5 * M_PI), Vector3d::UnitZ());
		//randomBasis = AngleAxisd((1.6 * M_PI) / 2, Vector3d::UnitZ());
		addInertialBlock(RESOURCE_DIR, "top", 3, 6, 0.8, "motor", Vector3d(2.8, 0.0, 0.0), randomBasis, Vector3d(0.75, 0.0, 0.0));

		randomBasis = Eigen::Matrix3d::Identity();
		//randomBasis = AngleAxisd((0.2 * M_PI) / 2, Vector3d::UnitZ());
		addInertialBlock(RESOURCE_DIR, "bottom", 3, 6, 0.8, "top", Vector3d(2.8, 0.0, 0.0), randomBasis, Vector3d(-2.8, 0.0, 0.0), JType::Ball);

		Particle p = { "bottom", Eigen::Vector3d(-3.0,0.0,0.0) };
		p.cp.push_back(Eigen::Vector3d(0.0, 0.0, 0.0));
		p.cp.push_back(Eigen::Vector3d(-1.0, 0.0, 0.0));
		p.cp.push_back(Eigen::Vector3d(-2.0, 0.25, 0.0));
		p.cp.push_back(Eigen::Vector3d(-1.0, 0.875, 0.0));
		p.cp.push_back(Eigen::Vector3d(0.0, 1.5, 0.0));
		p.cp.push_back(Eigen::Vector3d(1.5, 0.85, 0.0));
		p.cp.push_back(Eigen::Vector3d(3.0, 0.25, 0.0));
		p.cp.push_back(Eigen::Vector3d(2.0, 0.0, 0.0));
		p.cp.push_back(Eigen::Vector3d(1.0, 0.0, 0.0));
		particles.push_back(p);

		randomBasis = AngleAxisd((1.09582), Vector3d::UnitZ());
		disconnectInertial("top", Vector3d(-4.40568, -2.19237, 0.0), randomBasis);

		randomBasis = AngleAxisd((1.22872), Vector3d::UnitZ());
		disconnectInertial("bottom", Vector3d(-8.0504, 0.505346, 0.0), randomBasis);
	}
	else if (sceneNum%numScenes == 5) // Demo case
	{
		/////////////////////////////////////////////////////////////
		//     S P R I N G  I N E R T I A  C O M P A R I S O N     //
		/////////////////////////////////////////////////////////////
		randomBasis = Eigen::Matrix3d::Identity();
		addInertialBlock(RESOURCE_DIR, "root", 1, 8, 8, "", Vector3d(0.0, 1.5, 0.0), randomBasis);
		blocks.find("root")->second->setInvisible(true);
		randomBasis = AngleAxisd((0.5 * M_PI), Vector3d::UnitZ());
		addInertialBlock(RESOURCE_DIR, "motor", 0.25, 0.5, 0.5, "root", Vector3d(-0.25, 0.0, 0.0), randomBasis, Vector3d(0.0, 0.75, 0.0), JType::Powered, 20);
		randomBasis = Eigen::Matrix3d::Identity();
		addInertialBlock(RESOURCE_DIR, "sliding_body", 4, 4, 1, "motor", Vector3d(-2.0, 0.0, 0.0), randomBasis, Vector3d(0.0, 0.0, 0.0));
		addJoint("sliding_body", "root", JType::Slider, Vector3d(1.0, 0.0, 0.0), Vector3d(0.0, 4.0, 0.0));
		randomBasis = Eigen::Matrix3d::Identity();
		addInertialBlock(RESOURCE_DIR, "top", 3, 3, 0.75, "sliding_body", Vector3d(-1.5, 0.0, 0.0), randomBasis, Vector3d(1.5, 0.0, 0.0), JType::Springy, M_PI, 20);

		randomBasis = AngleAxisd((1.6 * M_PI), Vector3d::UnitZ());
		addInertialBlock(RESOURCE_DIR, "right", 6, 4, 1, "sliding_body", Vector3d(-2.0, 0.0, 0.0), randomBasis, Vector3d(0.0, 0.0, 0.0));
		randomBasis = AngleAxisd((1.0 * M_PI) / 2, Vector3d::UnitZ());
		disconnectInertial("right", Vector3d(-4.0, -2.5, 0.0), randomBasis);

		randomBasis = AngleAxisd((-1.6 * M_PI), Vector3d::UnitZ());
		addInertialBlock(RESOURCE_DIR, "left", 6, 4, 1, "sliding_body", Vector3d(-2.0, 0.0, 0.0), randomBasis, Vector3d(0.0, 0.0, 0.0));
		randomBasis = AngleAxisd((1.0 * M_PI) / 2, Vector3d::UnitZ());
		disconnectInertial("left", Vector3d(-4.0, 2.5, 0.0), randomBasis);
	}
	else if (sceneNum == -1)
	{
		randomBasis = Eigen::Matrix3d::Identity();
		addInertialBlock(RESOURCE_DIR, "root", 1, 8, 8, "", Vector3d(0.0, 6.4, 0.0), randomBasis);
		blocks.find("root")->second->setInvisible(true);

		double power = -10;
		randomBasis = AngleAxisd((1.0 * M_PI), Vector3d::UnitZ());
		addInertialBlock(RESOURCE_DIR, "motor", 0.25, 1.0, 0.5, "root", Vector3d(-0.25, 0.0, 0.0), randomBasis, Vector3d(1.0, 5.0, 0.0), JType::Powered, power);
		rev = 2 * M_PI / abs(power);

		randomBasis = AngleAxisd((-0.5 * M_PI), Vector3d::UnitZ());
		addInertialBlock(RESOURCE_DIR, "top", 3, 6, 0.8, "motor", Vector3d(2.8, 0.0, 0.0), randomBasis, Vector3d(0.75, 0.0, 0.0));

		randomBasis = Eigen::Matrix3d::Identity();
		addInertialBlock(RESOURCE_DIR, "bottom", 3, 6, 0.8, "top", Vector3d(2.8, 0.0, 0.0), randomBasis, Vector3d(-2.8, 0.0, 0.0), JType::Ball);

		Particle p = { "bottom", Eigen::Vector3d(-3.0,0.0,0.0) };
		p.cp.push_back(Eigen::Vector3d(0.0, 0.0, 0.0));
		p.cp.push_back(Eigen::Vector3d(-1.0, 0.0, 0.0));
		p.cp.push_back(Eigen::Vector3d(-2.0, 0.25, 0.0));
		p.cp.push_back(Eigen::Vector3d(-1.0, 0.875, 0.0));
		p.cp.push_back(Eigen::Vector3d(0.0, 1.5, 0.0));
		p.cp.push_back(Eigen::Vector3d(1.5, 0.85, 0.0));
		p.cp.push_back(Eigen::Vector3d(3.0, 0.25, 0.0));
		p.cp.push_back(Eigen::Vector3d(2.0, 0.0, 0.0));
		p.cp.push_back(Eigen::Vector3d(1.0, 0.0, 0.0));
		particles.push_back(p);
	}
	else if (sceneNum == -2)
	{
		randomBasis = Eigen::Matrix3d::Identity();
		addInertialBlock(RESOURCE_DIR, "root", 1, 8, 8, "", Vector3d(0.0, 6.4, 0.0), randomBasis);
		blocks.find("root")->second->setInvisible(true);

		double power = -10;
		randomBasis = AngleAxisd((1.0 * M_PI), Vector3d::UnitZ());
		addInertialBlock(RESOURCE_DIR, "motor", 0.25, 1.0, 0.5, "root", Vector3d(-0.25, 0.0, 0.0), randomBasis, Vector3d(1.0, 5.0, 0.0), JType::Powered, power);
		rev = 2 * M_PI / abs(power);

		randomBasis = AngleAxisd((-0.5 * M_PI), Vector3d::UnitZ());
		//randomBasis = AngleAxisd((1.6 * M_PI) / 2, Vector3d::UnitZ());
		addInertialBlock(RESOURCE_DIR, "top", 3, 6, 0.8, "motor", Vector3d(2.8, 0.0, 0.0), randomBasis, Vector3d(0.75, 0.0, 0.0));

		randomBasis = Eigen::Matrix3d::Identity();
		//randomBasis = AngleAxisd((0.2 * M_PI) / 2, Vector3d::UnitZ());
		addInertialBlock(RESOURCE_DIR, "bottom", 3, 6, 0.8, "top", Vector3d(2.8, 0.0, 0.0), randomBasis, Vector3d(-2.8, 0.0, 0.0), JType::Ball);

		Particle p = { "bottom", Eigen::Vector3d(-3.0,0.0,0.0) };
		p.cp.push_back(Eigen::Vector3d(0.0, 0.0, 0.0));
		p.cp.push_back(Eigen::Vector3d(-1.0, 0.0, 0.0));
		p.cp.push_back(Eigen::Vector3d(-2.0, 0.25, 0.0));
		p.cp.push_back(Eigen::Vector3d(-1.0, 0.875, 0.0));
		p.cp.push_back(Eigen::Vector3d(0.0, 1.5, 0.0));
		p.cp.push_back(Eigen::Vector3d(1.5, 0.85, 0.0));
		p.cp.push_back(Eigen::Vector3d(3.0, 0.25, 0.0));
		p.cp.push_back(Eigen::Vector3d(2.0, 0.0, 0.0));
		p.cp.push_back(Eigen::Vector3d(1.0, 0.0, 0.0));
		particles.push_back(p);

		randomBasis = AngleAxisd((-0.35 * M_PI), Vector3d::UnitZ());
		disconnectInertial("top", Vector3d(1.0, 1.0, 0.0), randomBasis);

		randomBasis = AngleAxisd((0.65 * M_PI), Vector3d::UnitZ());
		disconnectInertial("bottom", Vector3d(1.0, -1.0, 0.0), randomBasis);

		//randomBasis = AngleAxisd((0.507048), Vector3d::UnitZ());
		//disconnectInertial("top", Vector3d(-2.22995, -3.89453, 0.0), randomBasis);

		//randomBasis = AngleAxisd((4.76157), Vector3d::UnitZ());
		//disconnectInertial("bottom", Vector3d(-4.60424, 1.51091, 0.0), randomBasis);

		//randomBasis = AngleAxisd((0.52235), Vector3d::UnitZ());
		//disconnectInertial("top", Vector3d(-1.85699, -3.98925, 0.0), randomBasis);

		//randomBasis = AngleAxisd((1.51275), Vector3d::UnitZ());
		//disconnectInertial("bottom", Vector3d(-6.09191, 1.68453, 0.0), randomBasis);

		//randomBasis = AngleAxisd((0.527428), Vector3d::UnitZ());
		//disconnectInertial("top", Vector3d(-2.50091, -3.56108, 0.0), randomBasis);

		//randomBasis = AngleAxisd((1.26239), Vector3d::UnitZ());
		//disconnectInertial("bottom", Vector3d(-6.61789, 1.69458, 0.0), randomBasis);
	}